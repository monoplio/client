{"version":3,"sources":["../node_modules/graphql-ruby-client/dist/sync sync","data/mutations/BuyHouse.mutation.jsx","data/mutations/BuyProperty.mutation.jsx","data/mutations/CreateAuction.mutation.jsx","data/mutations/CreateGame.mutation.jsx","data/mutations/EndBid.mutation.jsx","data/mutations/EndTurn.mutation.jsx","data/mutations/IncreaseBid.mutation.jsx","data/mutations/JoinGame.mutation.jsx","data/mutations/MortgageProperty.mutation.jsx","data/mutations/RejoinGame.mutation.jsx","data/mutations/RollDice.mutation.jsx","data/mutations/SellHouse.mutation.jsx","data/mutations/StartGame.mutation.jsx","data/mutations/UnmortgageProperty.mutation.jsx","data/queries/Game.query.jsx","data/queries/Games.query.jsx","data/queries/Tile.query.jsx","data/subscriptions/Test.subscription.jsx","components/Board/Board.jsx","components/CornerTile/CornerTile.jsx","components/Dice/Dice.jsx","components/Modals/AuctionModal.jsx","components/Modals/BuyAuctionModal.jsx","components/FunctionButton/FunctionButton.jsx","components/PropertyDetailed/PropertyDetailed.jsx","components/PropertyHeader/PropertyHeader.jsx","components/Tile/Tile.jsx","components/TileRow/TileRow.jsx","pages/JoinPage/JoinPage.jsx","pages/GamePage/GamePage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","BUY_HOUSE","gql","BUY_PROPERTY","CREATE_AUCTION","CREATE_GAME","END_BID","END_TURN","INCREASE_BID","JOIN_GAME","MORTGAGE_PROPERTY","REJOIN_GAME","ROLL_DICE","SELL_HOUSE","START_GAME","UNMORTGAGE_PROPERTY","GAME","TILE","TEST","Board","props","className","tile","game","tiles","style","transform","slice","reverse","setSelectedTile","src","width","message","dice","currentPlayer","CornerTile","currentPlayers","map","player","backgroundColor","color","onClick","console","log","boardTile","name","Dice","lastRoll1","title","lastRoll2","AuctionModal","useState","amount","setAmount","useQuery","variables","tileId","tileQueryLoading","loading","tileQueryData","data","htmlFor","marginBottom","highest","bal","min","type","onChange","target","value","setBid","increase","max","bids","i","length","user","canEnd","end","BuyAuctionModal","show","setShow","hide","buy","auction","FunctionButton","func","size","PropertyDetailed","boardTileType","propertySet","propertyRents","rent","propertyRent","stage","housePrice","mortgage","PropertyHeader","Tile","state","price","height","key","TileRow","JoinPage","options","formStatus","setFormStatus","username","setUsername","redirect","setRedirect","setLoading","onCompleted","setUser","createGame","owner","useMutation","to","href","fontSize","marginTop","placeholder","alert","GamePage","useParams","setGame","selectedTile","bidAmount","setBidAmount","subscriptionData","useSubscription","gameId","onSubscriptionData","gameEvents","resetSelectedTile","skip","playerId","auctionId","auctions","parseInt","increaseBid","useEndBidMutation","endBid","useCreateAuctionMutation","propertyId","auctionProperty","useBuyPropertyMutation","buyProperty","useBuyHouseMutation","buyHouse","useSellHouseMutation","sellHouse","useJoinGameMutation","joinGame","useRejoinGameMutation","rejoinGame","useStartGameMutation","startGame","useRollDiceMutation","rollDice","useEndTurnMutation","endTurn","useMortgagePropertyMutation","mortgageProperty","useUnmortgagePropertyMutation","unmortgageProperty","useEffect","players","balance","Math","apply","o","canBuyHouse","canSellHouse","canRoll","httpLink","HttpLink","uri","cable","ActionCable","createConsumer","splitLink","split","query","definition","getMainDefinition","kind","operation","ActionCableLink","client","ApolloClient","link","cache","InMemoryCache","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45fca0aa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 344;","import { useMutation, gql } from '@apollo/client'\n\nconst BUY_HOUSE = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        buyHouse(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useBuyHouseMutation = (options) => useMutation(BUY_HOUSE, options)\nexport { useBuyHouseMutation, BUY_HOUSE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst BUY_PROPERTY = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        buyProperty(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useBuyPropertyMutation = (options) => useMutation(BUY_PROPERTY, options)\nexport { useBuyPropertyMutation, BUY_PROPERTY }\n","import { useMutation, gql } from '@apollo/client'\n\nconst CREATE_AUCTION = gql`\n    mutation($propertyId: ID!){\n        createAuction(propertyId: $propertyId){\n          id\n        }\n      }\n`\n\nconst useCreateAuctionMutation = (options) => useMutation(CREATE_AUCTION, options)\nexport { useCreateAuctionMutation, CREATE_AUCTION }\n","import { useMutation, gql } from '@apollo/client'\n\nconst CREATE_GAME = gql`\n  mutation createGame ($username: String!) {\n    createGame(username: $username) {\n        id\n        owner {\n            id\n            username\n            color\n            game {\n                id\n            }\n        }\n    }\n  }\n`\n\nconst useCreateGameMutation = (options) => useMutation(CREATE_GAME, options)\nexport { useCreateGameMutation, CREATE_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst END_BID = gql`\n    mutation($playerId: ID!, $auctionId: ID!){\n        endBid(playerId: $playerId, auctionId: $auctionId){\n          id\n        }\n      }\n`\n\nconst useEndBidMutation = (options) => useMutation(END_BID, options)\nexport { useEndBidMutation, END_BID }\n","import { useMutation, gql } from '@apollo/client'\n\nconst END_TURN = gql`\n  mutation($playerId: ID!){\n    endTurn(playerId: $playerId){\n      id\n    }\n  }\n`\n\nconst useEndTurnMutation = (options) => useMutation(END_TURN, options)\nexport { useEndTurnMutation, END_TURN }\n","import { useMutation, gql } from '@apollo/client'\n\nconst INCREASE_BID = gql`\n    mutation($playerId: ID!, $auctionId: ID!, $bidAmount: Int!){\n        increaseBid(playerId: $playerId, auctionId: $auctionId, bidAmount: $bidAmount){\n          id\n        }\n      }\n`\n\nconst useIncreaseBidMutation = (options) => useMutation(INCREASE_BID, options)\nexport { useIncreaseBidMutation, INCREASE_BID }\n","import { useMutation, gql } from '@apollo/client'\n\nconst JOIN_GAME = gql`\n  mutation($username: String!, $gameId: ID!){\n    joinGame(username: $username, gameId: $gameId){\n      balance\n      id\n      isPlaying\n      lastRoll1\n      lastRoll2\n      color\n      username\n      x\n      y\n    }\n  }\n`\n\nconst useJoinGameMutation = (options) => useMutation(JOIN_GAME, options)\nexport { useJoinGameMutation, JOIN_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst MORTGAGE_PROPERTY = gql`\n  mutation($propertyId: ID!){\n    mortgageProperty(propertyId: $propertyId){\n      id\n    }\n  }\n`\n\nconst useMortgagePropertyMutation = (options) => useMutation(MORTGAGE_PROPERTY, options)\nexport { useMortgagePropertyMutation, MORTGAGE_PROPERTY }\n","import { useMutation, gql } from '@apollo/client'\n\nconst REJOIN_GAME = gql`\n  mutation($username: String!, $gameId: ID!){\n    rejoinGame(username: $username, gameId: $gameId){\n      balance\n      id\n      isPlaying\n      lastRoll1\n      lastRoll2\n      color\n      username\n      x\n      y\n    }\n  }\n`\n\nconst useRejoinGameMutation = (options) => useMutation(REJOIN_GAME, options)\nexport { useRejoinGameMutation, REJOIN_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst ROLL_DICE = gql`\n  mutation($playerId: ID!){\n    rollDice(playerId: $playerId){\n      id\n    }\n  }\n`\n\nconst useRollDiceMutation = (options) => useMutation(ROLL_DICE, options)\nexport { useRollDiceMutation, ROLL_DICE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst SELL_HOUSE = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        sellHouse(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useSellHouseMutation = (options) => useMutation(SELL_HOUSE, options)\nexport { useSellHouseMutation, SELL_HOUSE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst START_GAME = gql`\n  mutation($gameId: ID!){\n    startGame(gameId: $gameId){\n      id\n    }\n  }\n`\n\nconst useStartGameMutation = (options) => useMutation(START_GAME, options)\nexport { useStartGameMutation, START_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst UNMORTGAGE_PROPERTY = gql`\n  mutation($propertyId: ID!){\n    unmortgageProperty(propertyId: $propertyId){\n      id\n    }\n  }\n`\n\nconst useUnmortgagePropertyMutation = (options) => useMutation(UNMORTGAGE_PROPERTY, options)\nexport { useUnmortgagePropertyMutation, UNMORTGAGE_PROPERTY }\n","import { gql } from '@apollo/client'\n\nconst GAME = gql`   \n    query($id: ID!){\n        game(id: $id){\n            auctions {\n                bids {\n                    amount\n                    player {\n                        id\n                    }\n                }\n                id\n            }\n            height\n            hotelAvailable\n            houseAvailable\n            id\n            players {\n                id\n                username\n                color\n                balance\n            }\n            owner {\n                id\n                username\n            }\n            currentPlayer{\n                id\n                username\n                canRoll\n                lastRoll1\n                lastRoll2\n                balance\n                tile {\n                    id\n                    boardTile{\n                        ... on ActionTile {\n                            id\n                            name\n                        }\n                        ... on Property {\n                            id\n                            name\n                            price\n                            mortgage\n                            stage\n                            state\n                            housePrice\n                            propertySet{\n                                color\n                            }\n                            player{\n                                id\n                            }\n                        }\n                        ... on Deck {\n                            id\n                            name\n                        }\n                        ... on Utility {\n                            id\n                            name\n                            price\n                        }\n                    }\n                    boardTileType\n                }\n            }\n            state\n            tiles {\n            id\n            boardTile{\n                ... on ActionTile {\n                    id\n                    name\n                }\n                ... on Property {\n                    id\n                    name\n                    price\n                    mortgage\n                    stage\n                    state\n                    housePrice\n                    propertySet{\n                        color\n                    }\n                    player{\n                        color\n                    }\n                }\n                ... on Deck {\n                    id\n                    name\n                }\n                ... on Utility {\n                    id\n                    name\n                    price\n                }\n            }\n            boardTileType\n            currentPlayers{\n                id\n                color\n            }\n            x\n            y\n            }\n            width\n        }\n    }  \n`\n\nexport { GAME }\n","import { gql } from '@apollo/client'\n\nconst GAMES = gql`   \n    query{\n        games{\n            id\n            height\n            hotelAvailable\n            houseAvailable\n        }\n    }  \n`\n\nexport { GAMES }\n","import { gql } from '@apollo/client'\n\nconst TILE = gql`   \n    query($id: ID!) {\n        tile(id: $id) {\n            boardTile{\n                ... on ActionTile {\n                    id\n                    name\n                }\n                ... on Property {\n                    id\n                    name\n                    price\n                    mortgage\n                    stage\n                    state\n                    housePrice\n                    canBuyHouse\n                    canSellHouse\n                    propertyRents{\n                        stage\n                        rent\n                    }\n                    propertySet{\n                        color\n                    }\n                    player{\n                        id\n                    }\n                }\n                ... on Deck {\n                    id\n                    name\n                }\n                ... on Utility {\n                    id\n                    name\n                    price\n                }\n            }\n            boardTileType\n        }\n    }\n`\n\nexport { TILE }\n","import { gql } from '@apollo/client'\n\nconst TEST = gql`\n    subscription{\n        gameEvents{\n            data{\n                auctions {\n                    bids {\n                        amount\n                        player {\n                            id\n                        }\n                    }\n                    id\n                }\n                height\n                hotelAvailable\n                houseAvailable\n                id\n                players {\n                    id\n                    username\n                    color\n                    balance\n                }\n                owner {\n                    id\n                    username\n                }\n                currentPlayer{\n                    id\n                    username\n                    canRoll\n                    lastRoll1\n                    lastRoll2\n                    balance\n                    tile {\n                        id\n                        boardTile{\n                            ... on ActionTile {\n                                id\n                                name\n                            }\n                            ... on Property {\n                                id\n                                name\n                                price\n                                mortgage\n                                stage\n                                state\n                                housePrice\n                                propertySet{\n                                    color\n                                }\n                                player{\n                                    id\n                                }\n                            }\n                            ... on Deck {\n                                id\n                                name\n                            }\n                            ... on Utility {\n                                id\n                                name\n                                price\n                            }\n                        }\n                        boardTileType\n                    }\n                }\n                state\n                tiles {\n                id\n                boardTile{\n                    ... on ActionTile {\n                        id\n                        name\n                    }\n                    ... on Property {\n                        id\n                        name\n                        price\n                        mortgage\n                        stage\n                        state\n                        housePrice\n                        propertySet{\n                            color\n                        }\n                        player{\n                            color\n                        }\n                    }\n                    ... on Deck {\n                        id\n                        name\n                    }\n                    ... on Utility {\n                        id\n                        name\n                        price\n                    }\n                }\n                boardTileType\n                currentPlayers{\n                    id\n                    color\n                }\n                x\n                y\n                }\n                width\n            }\n            message\n        }\n    }\n`\nexport { TEST }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { CornerTile, TileRow, Dice } from '../../components'\n\nconst Board = props => {\n  return (\n    <div className=\"board\">\n        <div className=\"horizontal-row\">\n            <CornerTile tile={props.game.tiles[20]}/>\n            <TileRow style={{ transform: 'rotate(180deg)' }} tiles={props.game.tiles.slice(21, 30).reverse()} setSelectedTile={props.setSelectedTile}/>\n            <CornerTile tile={props.game.tiles[30]}/>\n        </div>\n        <div className=\"middle-row\">\n            <div className=\"column\">\n                <TileRow style={{ transform: 'rotate(90deg)' }} tiles={props.game.tiles.slice(11, 20).reverse()} setSelectedTile={props.setSelectedTile}/>\n            </div>\n            <div className=\"center-board\">\n                <img src=\"https://i.imgur.com/1XwqRQP.png\" width=\"300px\"></img>\n                { props.message && props.message === 'RollDice' &&\n                  <Dice dice={props.game.currentPlayer}/>\n                }\n            </div>\n            <div className=\"column\">\n                <TileRow style={{ transform: 'rotate(270deg)' }} tiles={props.game.tiles.slice(31, 40).reverse()} setSelectedTile={props.setSelectedTile}/>\n            </div>\n        </div>\n        <div className=\"horizontal-row\">\n            <CornerTile tile={props.game.tiles[10]}/>\n            <TileRow tiles={props.game.tiles.slice(1, 10).reverse()} setSelectedTile={props.setSelectedTile}/>\n            <CornerTile tile={props.game.tiles[0]}/>\n        </div>\n  </div>\n  )\n}\n\nexport { Board }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst CornerTile = props => {\n  return (\n    <div className=\"corner\">\n        <div className=\"corner-tile-players\">\n            { props.tile.currentPlayers.map(player => (\n                <div className=\"horizontal-tile-player\" key={'player-' + player.id} style={{ backgroundColor: player.color }} onClick={() => console.log(player)}></div>\n            ))\n            }\n        </div>\n        <div>{props.tile.boardTile.name}</div>\n    </div>\n  )\n}\n\nexport { CornerTile }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst Dice = props => {\n  return (\n    <div className=\"dice-wrap\">\n        <span className={'dice dice-' + props.dice.lastRoll1} title={'Dice ' + props.dice.lastRoll1}></span>\n        <span className={'dice dice-' + props.dice.lastRoll2} title={'Dice ' + props.dice.lastRoll2}></span>\n    </div>\n  )\n}\n\nexport { Dice }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { TILE } from '../../data'\nimport { PropertyDetailed } from '../../components'\n\nfunction AuctionModal (props) {\n  const [amount, setAmount] = useState('')\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    variables: {\n      id: props.tileId\n    }\n  })\n\n  const handleInputChange = (e) => {\n    setAmount(e.target.value)\n    props.setBid(e.target.value)\n  }\n\n  const canEnd = () => {\n    let max = props.bids[0]\n    for (let i = 1; i < props.bids.length; i++) {\n      max = props.bids[i].amount > max.amount ? props.bids[i] : max\n    }\n    return (props.user.id !== max.player.id || max.amount === 0)\n  }\n\n  return (\n    <>\n        <div className=\"modal\">\n            <label className=\"modal-bg\" htmlFor=\"modal-1\"></label>\n            <div className=\"modal-inner\">\n                <div className=\"modal-body\">\n                    {(!tileQueryLoading && tileQueryData) &&\n                      <>\n                        <PropertyDetailed tile={tileQueryData.tile} />\n                        <div style={{ marginBottom: '2em' }}></div>\n                      </>\n                    }\n                    <h2>Highest Bid: ${props.highest}</h2>\n                    {\n                        (!props.bal || props.bal > props.highest)\n                          ? <>\n                            <input className=\"menu-input-num\" min={`${props.highest + 1}`} type=\"number\" onChange={handleInputChange} />\n                            <input className=\"menu-button\" type=\"button\" value=\"Increase Bid\" onClick={() => { props.setBid(amount); props.increase() }}/>\n                        </>\n                          : null\n                    }\n                    {\n                        canEnd()\n                          ? <input className=\"menu-button\" type=\"button\" value=\"End Bid\" onClick={() => { props.end() }}/>\n                          : null\n                    }\n\n                </div>\n            </div>\n        </div>\n    </>\n  )\n}\n\nexport { AuctionModal }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { TILE } from '../../data'\nimport { PropertyDetailed } from '../../components'\n\nfunction BuyAuctionModal (props) {\n  const [show, setShow] = useState(true)\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    variables: {\n      id: props.tileId\n    }\n  })\n\n  const hide = () => {\n    setShow(false)\n  }\n  return (\n        <>\n            {show\n              ? (\n                <div className=\"modal\">\n                    <label className=\"modal-bg\" htmlFor=\"modal-1\"></label>\n                    <div className=\"modal-inner\">\n                        <div className=\"modal-body\">\n                        {(!tileQueryLoading && tileQueryData) &&\n                          <>\n                            <PropertyDetailed tile={tileQueryData.tile} />\n                            <div style={{ marginBottom: '2em' }}></div>\n                          </>\n                        }\n                        <input className=\"menu-button\" type=\"button\" value=\"Buy\" onClick={() => { props.buy(); hide() }}/>\n                        <input className=\"menu-button\" type=\"button\" value=\"Auction\" onClick={() => { props.auction(); hide() }}/>\n                        </div>\n                    </div>\n                </div>\n                )\n              : null}\n        </>\n  )\n}\n\nexport { BuyAuctionModal }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport ClipLoader from 'react-spinners/ClipLoader'\n\nconst FunctionButton = props => {\n  return (\n    <button className=\"menu-button\" onClick={props.func}>\n        {!props.loading ? <span>{props.value}</span> : <ClipLoader color={'white'} size={15}/>}\n    </button>\n  )\n}\n\nexport { FunctionButton }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst PropertyDetailed = props => {\n  return (\n        <>\n            {(props.tile.boardTileType === 'Property' && props.tile.boardTile.propertySet.color !== 'black') &&\n                <div className=\"property-detailed\">\n                    <div className=\"property-detailed-header\" style={{ backgroundColor: props.tile.boardTile.propertySet.color }}>\n                        {props.tile.boardTile.name}\n                    </div>\n                    <div className=\"property-detailed-rent\">RENT ${props.tile.boardTile.propertyRents[0].rent}</div>\n                    <hr></hr>\n                    <>\n                        { props.tile.boardTile.propertyRents.map(propertyRent => (\n                            <>\n                                { propertyRent.stage !== 0 &&\n                                    <div className=\"property-detailed-row\" key={propertyRent.stage}>\n                                        <div>With {propertyRent.stage < 5 ? propertyRent.stage : ''} { propertyRent.stage !== 1 ? (propertyRent.stage !== 5 ? 'Houses' : 'HOTEL') : 'House' }</div>\n                                        <div>${propertyRent.rent}</div>\n                                    </div>\n                                }\n                            </>\n                        ))\n                        }\n                    </>\n                    <hr></hr>\n                    <div className=\"property-detailed-row\">\n                        <div>House Cost</div>\n                        <div>${props.tile.boardTile.housePrice}</div>\n                    </div>\n                    <div className=\"property-detailed-row\">\n                        <div>Mortgage Value</div>\n                        <div>${props.tile.boardTile.mortgage}</div>\n                    </div>\n                </div>\n            }\n        </>\n  )\n}\n\nexport { PropertyDetailed }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst PropertyHeader = props => {\n  return (\n    <div className=\"property-header\" style={{ backgroundColor: props.color }}>\n        { props.stage < 5 &&\n            <>\n                { props.stage >= 1 && <div className=\"property-house\"></div> }\n                { props.stage >= 2 && <div className=\"property-house\"></div> }\n                { props.stage >= 3 && <div className=\"property-house\"></div> }\n                { props.stage >= 4 && <div className=\"property-house\"></div> }\n            </>\n        }\n        { props.stage >= 5 &&\n            <div className=\"property-hotel\"></div>\n        }\n    </div>\n  )\n}\n\nexport { PropertyHeader }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { PropertyHeader } from '../../components'\n\nconst Tile = props => {\n  return (\n    <div className=\"horizontal-tile\" key={props.key} onClick={() => props.setSelectedTile(props.tile.id)} style={{ backgroundColor: (props.tile.boardTileType === 'Property' ? (props.tile.boardTile.state === 'mortgaged' ? 'gray' : 'white') : ' white') }}>\n        <div className=\"horizontal-tile-players\">\n            { props.tile.currentPlayers.map(player => (\n                <div className=\"horizontal-tile-player\" key={'player-' + player.id} style={{ backgroundColor: player.color }}></div>\n            ))\n            }\n        </div>\n        { props.tile.boardTileType === 'ActionTile' &&\n            <div>{props.tile.boardTile.name}</div>\n        }\n\n        { props.tile.boardTileType === 'Property' &&\n            <>\n                <PropertyHeader color={props.tile.boardTile.propertySet.color} stage={props.tile.boardTile.stage}/>\n                <div>{props.tile.boardTile.name}</div>\n                <div>${props.tile.boardTile.price}</div>\n                { props.tile.boardTile.player !== null &&\n                    <div style={{ backgroundColor: props.tile.boardTile.player.color, height: '5px' }}></div>\n                }\n            </>\n        }\n\n        { props.tile.boardTileType === 'Deck' &&\n            <div>{props.tile.boardTile.name}</div>\n        }\n\n        { props.tile.boardTileType === 'Utility' &&\n            <>\n                <div>{props.tile.boardTile.name}</div>\n                <div>${props.tile.boardTile.price}</div>\n            </>\n        }\n    </div>\n  )\n}\n\nexport { Tile }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { Tile } from '../../components'\n\nconst TileRow = props => {\n  return (\n    <div className=\"row\" style={props.style}>\n        { props.tiles.map(tile => (\n            <Tile key={tile.id} tile={tile} setSelectedTile={props.setSelectedTile}/>\n        ))\n        }\n    </div>\n  )\n}\n\nexport { TileRow }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useCreateGameMutation } from '../../data'\nimport { Redirect } from 'react-router-dom'\nimport { FunctionButton } from '../../components'\n\nconst JoinPage = props => {\n  const [formStatus, setFormStatus] = useState('initial')\n  const [username, setUsername] = useState()\n  const [redirect, setRedirect] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n  const redirectLocation = data => {\n    setLoading(false)\n    props.setUser(data.createGame.owner)\n    setRedirect(data.createGame.id)\n  }\n\n  const [createGame] = useCreateGameMutation({\n    onCompleted: redirectLocation\n  })\n\n  const handleCreate = () => {\n    if ((username !== '' && username.length > 0)) {\n      setLoading(true)\n      createGame({\n        variables: {\n          username: username\n        }\n      })\n    } else {\n      if (username === '') {\n        alert('Please enter a title.')\n      }\n    }\n  }\n\n  const handleInputChange = function (e) {\n    switch (e.target.name) {\n      case 'username':\n        setUsername(e.target.value)\n        break\n    }\n  }\n\n  return (\n      <div className=\"join-page\">\n        { redirect && <Redirect to={'/game/' + redirect}/> }\n        <div className=\"menu\">\n          { formStatus === 'initial' &&\n            <>\n              <div className=\"menu-title\"><img src=\"https://i.imgur.com/1XwqRQP.png\" width=\"300px\"></img></div>\n              {/* <div className=\"menu-subtitle\">~100 players online</div>\n              <input className=\"menu-button\" type=\"button\" value=\"Find Game\"/> */}\n              <input className=\"menu-button\" type=\"button\" value=\"Create Lobby\" onClick={() => setFormStatus('creating')}/>\n              <a className=\"menu-button\" href=\"https://github.com/monoplio\">Github</a>\n              <p style={ { fontSize: '10px', marginTop: '3em' } }>© Justin Chang & Matthew MacRae-Bovell</p>\n            </>\n          }\n\n          { formStatus === 'creating' &&\n            <>\n              <input className=\"menu-input\" type=\"text\" placeholder=\"Nickname (optional)\" name=\"username\" value={username} onChange={handleInputChange}/>\n              {/* <button className=\"menu-button\" onClick={handleCreate}>{!loading ? <span>Go</span> : <ClipLoader color={'white'} size={15}/>}</button> */}\n              <FunctionButton func={handleCreate} loading={loading} value={'Go'}/>\n              <input className=\"menu-button\" type=\"button\" value=\"Back\" onClick={() => setFormStatus('initial')}/>\n            </>\n          }\n        </div>\n      </div>\n  )\n}\n\nexport { JoinPage }\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-empty-pattern */\nimport React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport { useEndBidMutation, useIncreaseBidMutation, useCreateAuctionMutation, useBuyHouseMutation, useBuyPropertyMutation, useEndTurnMutation, useJoinGameMutation, useSellHouseMutation, useStartGameMutation, useRejoinGameMutation, useRollDiceMutation, useMortgagePropertyMutation, useUnmortgagePropertyMutation, GAME, TEST, TILE } from '../../data'\nimport { Board, PropertyDetailed, BuyAuctionModal, AuctionModal } from '../../components'\n\nconst GamePage = props => {\n  const { id } = useParams()\n  const [game, setGame] = useState(null)\n  const [username, setUsername] = useState()\n  const [selectedTile, setSelectedTile] = useState(null)\n  const [bidAmount, setBidAmount] = useState(0)\n\n  const handleReceivedData = ({ subscriptionData: { data } }) => {\n    setGame(data.gameEvents.data)\n  }\n\n  const { loading, data } = useQuery(GAME, {\n    variables: {\n      id: id\n    }\n  })\n\n  const { data: subscriptionData } = useSubscription(TEST, // data: testData, loading: testLoading\n    {\n      variables: {\n        gameId: id\n      },\n      onSubscriptionData: handleReceivedData\n    }\n  )\n\n  const setUser = data => {\n    props.setUser(data.joinGame)\n  }\n\n  const setUserAfterRejoin = data => {\n    props.setUser(data.rejoinGame)\n  }\n\n  const clearProperty = data => {\n    setSelectedTile(null)\n  }\n\n  const resetSelectedTile = data => {\n    setSelectedTile(selectedTile)\n  }\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    skip: selectedTile === null,\n    variables: {\n      id: selectedTile\n    }\n  })\n\n  const [increaseBid] = useIncreaseBidMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      auctionId: game && game.auctions && game.auctions[0] ? game.auctions[0].id : -1,\n      bidAmount: parseInt(bidAmount)\n    }\n  })\n\n  const [endBid] = useEndBidMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      auctionId: game && game.auctions && game.auctions[0] ? game.auctions[0].id : -1\n    }\n  })\n\n  const [auctionProperty] = useCreateAuctionMutation({\n    variables: {\n      propertyId: (game && game.currentPlayer) ? game.currentPlayer.tile.boardTile.id : -1\n    }\n  })\n\n  const [buyProperty] = useBuyPropertyMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (game && game.currentPlayer) ? game.currentPlayer.tile.boardTile.id : -1\n    }\n  })\n\n  const [buyHouse] = useBuyHouseMutation({\n    onCompleted: resetSelectedTile,\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (!tileQueryLoading && tileQueryData && tileQueryData.tile) ? tileQueryData.tile.boardTile.id : -1\n    }\n  })\n\n  const [sellHouse] = useSellHouseMutation({\n    onCompleted: resetSelectedTile,\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (!tileQueryLoading && tileQueryData && tileQueryData.tile) ? tileQueryData.tile.boardTile.id : -1\n    }\n  })\n\n  const [joinGame] = useJoinGameMutation({\n    onCompleted: setUser\n  })\n\n  const [rejoinGame] = useRejoinGameMutation({\n    onCompleted: setUserAfterRejoin\n  })\n\n  const [startGame] = useStartGameMutation({\n    variables: {\n      gameId: id\n    }\n  })\n\n  const [rollDice] = useRollDiceMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1\n    }\n  })\n\n  const [endTurn] = useEndTurnMutation({\n    onCompleted: clearProperty,\n    variables: {\n      playerId: props.user ? props.user.id : -1\n    }\n  })\n\n  const [mortgageProperty] = useMortgagePropertyMutation({\n    variables: {\n      propertyId: tileQueryData ? parseInt(tileQueryData.tile.boardTile.id) : -1\n    }\n  })\n\n  const [unmortgageProperty] = useUnmortgagePropertyMutation({\n    variables: {\n      propertyId: tileQueryData ? parseInt(tileQueryData.tile.boardTile.id) : -1\n    }\n  })\n\n  const handleJoin = () => {\n    if (username && (username !== '' && username.length > 0)) {\n      joinGame({\n        variables: {\n          username: username,\n          gameId: id\n        }\n      })\n    } else {\n      alert('Please enter a username.')\n    }\n  }\n\n  const handleInputChange = function (e) {\n    switch (e.target.name) {\n      case 'username':\n        setUsername(e.target.value)\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!loading) {\n      if (game === null) {\n        setGame(data.game)\n      }\n    }\n  }, [data])\n\n  return (\n      <div className=\"game-page\">\n        { (!loading && game && game.state === 'pending') &&\n          <div className=\"menu\">\n              <img src=\"https://i.imgur.com/1XwqRQP.png\" width=\"300px\"></img>\n              <div className=\"menu-title\">Game {id}</div>\n              <div className=\"menu-subtitle\">~ Awaiting players...</div>\n              <div className=\"menu-players\">\n                { game.players.map(player => (\n                  <>\n                    { props.user && (player.id === props.user.id)\n                      ? <div key={player.id}> * {player.username}</div>\n                      : <div key={player.id}> {player.username}</div>\n                    }\n                  </>\n                ))\n                }\n              </div>\n              { !props.user &&\n                <>\n                  <input className=\"menu-input\" type=\"text\" placeholder=\"Nickname (optional)\" name=\"username\" value={username} onChange={handleInputChange}/>\n                  <input className=\"menu-button\" type=\"button\" value=\"Join\" onClick={handleJoin}/>\n                </>\n              }\n              { props.user && (game.owner.id === props.user.id) && (game.players.length >= 2) &&\n                  <input className=\"menu-button\" type=\"button\" value=\"Start Game\" onClick={startGame}/>\n              }\n            </div>\n        }\n        { (!loading && game && game.state !== 'pending') &&\n          <div className=\"game-display\">\n            <div className=\"options\">\n              { game.players.map(player => (\n                <>\n                  <div className=\"player-card\" style={{ backgroundColor: player.color }} onClick={() => rejoinGame({ variables: { username: player.username, gameId: game.id } })}>\n                    <div>{player.id === game.currentPlayer.id ? '->' : ''} {player.username} { props.user && (player.id === props.user.id) ? '(you)' : ''}</div>\n                    <div>${player.balance} </div>\n                  </div>\n                </>\n              ))\n              }\n            </div>\n            <Board game={game} message={ subscriptionData ? subscriptionData.gameEvents.message : null} setSelectedTile={setSelectedTile}/>\n            {\n              (game.state === 'auction')\n                ? <AuctionModal game={game} user={props.user} bids={game.auctions[0].bids} bal={props.user.balance} highest={Math.max.apply(Math, game.auctions[0].bids.map((o) => { return o.amount }))} setBid={setBidAmount} increase={increaseBid} end={endBid} tileId={game.currentPlayer.tile.id}/>\n                : null\n            }\n            <div className=\"options\">\n              {(selectedTile !== null && !tileQueryLoading) &&\n              <>\n                <PropertyDetailed tile={tileQueryData.tile} />\n              </>\n              }\n              { props.user && game && game.currentPlayer.id === props.user.id &&\n                <>\n                { (selectedTile !== null && !tileQueryLoading && tileQueryData && tileQueryData.tile.boardTileType === 'Property' && tileQueryData.tile.boardTile.player !== null && game.currentPlayer.id === tileQueryData.tile.boardTile.player.id) &&\n                  <>\n                    {\n                      (tileQueryData.tile.boardTile.canBuyHouse === true && tileQueryData.tile.boardTile.stage < 5 && game.currentPlayer.balance >= tileQueryData.tile.boardTile.housePrice) &&\n                        <input className=\"menu-button\" type=\"button\" value=\"Buy House\" onClick={buyHouse}/>\n                    }\n                    {\n                      (tileQueryData.tile.boardTile.canSellHouse === true && tileQueryData.tile.boardTile.stage > 0) &&\n                        <input className=\"menu-button\" type=\"button\" value=\"Sell House\" onClick={sellHouse}/>\n                    }\n                    {\n                      tileQueryData.tile.boardTile.state !== 'mortgaged'\n                        ? <input className=\"menu-button\" type=\"button\" value=\"Mortgage\" onClick={mortgageProperty}/>\n                        : <input className=\"menu-button\" type=\"button\" value=\"Un Mortgage\" onClick={unmortgageProperty}/>\n                    }\n                  </>\n                }\n                { game.currentPlayer.tile.boardTileType === 'Property' && game.currentPlayer.tile.boardTile.player === null &&\n                  <BuyAuctionModal buy={buyProperty} auction={auctionProperty} tileId={game.currentPlayer.tile.id}/>\n                }\n                { game.currentPlayer.canRoll\n                  ? <input className=\"menu-button\" type=\"button\" value=\"Roll\" onClick={rollDice}/>\n                  : <input className=\"menu-button\" type=\"button\" value=\"End\" onClick={endTurn}/>\n                }\n                </>\n              }\n            </div>\n          </div>\n        }\n      </div>\n  )\n}\n\nexport { GamePage }\n","import React, { useState } from 'react'\nimport { JoinPage, GamePage } from './pages'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from '@apollo/client'\nimport { ActionCableLink } from 'graphql-ruby-client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport ActionCable from 'actioncable'\n\nimport './App.css'\n\nconst httpLink = new HttpLink({\n  uri: 'http://143.198.235.198:3000/graphql' // https://floating-reef-26790.herokuapp.com/graphql https://floating-reef-26790.herokuapp.com/graphql\n})\n\nconst cable = ActionCable.createConsumer('ws://143.198.235.198:3000/cable') // wss://floating-reef-26790.herokuapp.com:/cable\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  new ActionCableLink({ cable }),\n  httpLink\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n})\n\nfunction App () {\n  const [user, setUser] = useState(null)\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Switch>\n          <Route path=\"/game/:id\" >\n            <GamePage user={user} setUser={setUser}/>\n          </Route>\n          <Route exact path=\"/\">\n            <JoinPage setUser={setUser}/>\n          </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\nreportWebVitals()\n"],"sourceRoot":""}