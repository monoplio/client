{"version":3,"sources":["../node_modules/graphql-ruby-client/dist/sync sync","data/mutations/BuyHouse.mutation.jsx","data/mutations/BuyProperty.mutation.jsx","data/mutations/CreateAuction.mutation.jsx","data/mutations/CreateGame.mutation.jsx","data/mutations/EndBid.mutation.jsx","data/mutations/EndTurn.mutation.jsx","data/mutations/IncreaseBid.mutation.jsx","data/mutations/JoinGame.mutation.jsx","data/mutations/MortgageProperty.mutation.jsx","data/mutations/RejoinGame.mutation.jsx","data/mutations/RollDice.mutation.jsx","data/mutations/SellHouse.mutation.jsx","data/mutations/StartGame.mutation.jsx","data/mutations/UnmortgageProperty.mutation.jsx","data/queries/Game.query.jsx","data/queries/Games.query.jsx","data/queries/Tile.query.jsx","data/subscriptions/Test.subscription.jsx","pages/JoinPage/JoinPage.jsx","components/Board/Board.jsx","components/CornerTile/CornerTile.jsx","components/Dice/Dice.jsx","components/Modals/AuctionModal.jsx","components/Modals/BuyAuctionModal.jsx","components/PropertyDetailed/PropertyDetailed.jsx","components/PropertyHeader/PropertyHeader.jsx","components/Tile/Tile.jsx","components/TileRow/TileRow.jsx","pages/GamePage/GamePage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","BUY_HOUSE","gql","BUY_PROPERTY","CREATE_AUCTION","CREATE_GAME","END_BID","END_TURN","INCREASE_BID","JOIN_GAME","MORTGAGE_PROPERTY","REJOIN_GAME","ROLL_DICE","SELL_HOUSE","START_GAME","UNMORTGAGE_PROPERTY","GAME","TILE","TEST","JoinPage","props","options","useState","formStatus","setFormStatus","username","setUsername","redirect","setRedirect","onCompleted","data","setUser","createGame","owner","useMutation","className","to","src","width","type","value","onClick","href","style","fontSize","marginTop","placeholder","name","onChange","target","length","variables","alert","Board","tile","game","tiles","transform","slice","reverse","setSelectedTile","message","dice","currentPlayer","CornerTile","currentPlayers","map","player","backgroundColor","color","console","log","boardTile","Dice","lastRoll1","title","lastRoll2","AuctionModal","amount","setAmount","useQuery","tileId","tileQueryLoading","loading","tileQueryData","htmlFor","marginBottom","highest","bal","min","setBid","increase","max","bids","i","user","canEnd","end","BuyAuctionModal","show","setShow","hide","buy","auction","PropertyDetailed","boardTileType","propertySet","propertyRents","rent","propertyRent","stage","housePrice","mortgage","PropertyHeader","Tile","state","price","height","key","TileRow","GamePage","useParams","setGame","selectedTile","bidAmount","setBidAmount","subscriptionData","useSubscription","gameId","onSubscriptionData","gameEvents","resetSelectedTile","skip","playerId","auctionId","auctions","parseInt","increaseBid","useEndBidMutation","endBid","useCreateAuctionMutation","propertyId","auctionProperty","useBuyPropertyMutation","buyProperty","useBuyHouseMutation","buyHouse","useSellHouseMutation","sellHouse","useJoinGameMutation","joinGame","useRejoinGameMutation","rejoinGame","useStartGameMutation","startGame","useRollDiceMutation","rollDice","useEndTurnMutation","endTurn","useMortgagePropertyMutation","mortgageProperty","useUnmortgagePropertyMutation","unmortgageProperty","useEffect","players","balance","Math","apply","o","canBuyHouse","canSellHouse","canRoll","httpLink","HttpLink","uri","cable","ActionCable","createConsumer","splitLink","split","query","definition","getMainDefinition","kind","operation","ActionCableLink","client","ApolloClient","link","cache","InMemoryCache","App","basename","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1e68208.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 338;","import { useMutation, gql } from '@apollo/client'\n\nconst BUY_HOUSE = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        buyHouse(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useBuyHouseMutation = (options) => useMutation(BUY_HOUSE, options)\nexport { useBuyHouseMutation, BUY_HOUSE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst BUY_PROPERTY = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        buyProperty(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useBuyPropertyMutation = (options) => useMutation(BUY_PROPERTY, options)\nexport { useBuyPropertyMutation, BUY_PROPERTY }\n","import { useMutation, gql } from '@apollo/client'\n\nconst CREATE_AUCTION = gql`\n    mutation($propertyId: ID!){\n        createAuction(propertyId: $propertyId){\n          id\n        }\n      }\n`\n\nconst useCreateAuctionMutation = (options) => useMutation(CREATE_AUCTION, options)\nexport { useCreateAuctionMutation, CREATE_AUCTION }\n","import { useMutation, gql } from '@apollo/client'\n\nconst CREATE_GAME = gql`\n  mutation createGame ($username: String!) {\n    createGame(username: $username) {\n        id\n        owner {\n            id\n            username\n            color\n            game {\n                id\n            }\n        }\n    }\n  }\n`\n\nconst useCreateGameMutation = (options) => useMutation(CREATE_GAME, options)\nexport { useCreateGameMutation, CREATE_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst END_BID = gql`\n    mutation($playerId: ID!, $auctionId: ID!){\n        endBid(playerId: $playerId, auctionId: $auctionId){\n          id\n        }\n      }\n`\n\nconst useEndBidMutation = (options) => useMutation(END_BID, options)\nexport { useEndBidMutation, END_BID }\n","import { useMutation, gql } from '@apollo/client'\n\nconst END_TURN = gql`\n  mutation($playerId: ID!){\n    endTurn(playerId: $playerId){\n      id\n    }\n  }\n`\n\nconst useEndTurnMutation = (options) => useMutation(END_TURN, options)\nexport { useEndTurnMutation, END_TURN }\n","import { useMutation, gql } from '@apollo/client'\n\nconst INCREASE_BID = gql`\n    mutation($playerId: ID!, $auctionId: ID!, $bidAmount: Int!){\n        increaseBid(playerId: $playerId, auctionId: $auctionId, bidAmount: $bidAmount){\n          id\n        }\n      }\n`\n\nconst useIncreaseBidMutation = (options) => useMutation(INCREASE_BID, options)\nexport { useIncreaseBidMutation, INCREASE_BID }\n","import { useMutation, gql } from '@apollo/client'\n\nconst JOIN_GAME = gql`\n  mutation($username: String!, $gameId: ID!){\n    joinGame(username: $username, gameId: $gameId){\n      balance\n      id\n      isPlaying\n      lastRoll1\n      lastRoll2\n      color\n      username\n      x\n      y\n    }\n  }\n`\n\nconst useJoinGameMutation = (options) => useMutation(JOIN_GAME, options)\nexport { useJoinGameMutation, JOIN_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst MORTGAGE_PROPERTY = gql`\n  mutation($propertyId: ID!){\n    mortgageProperty(propertyId: $propertyId){\n      id\n    }\n  }\n`\n\nconst useMortgagePropertyMutation = (options) => useMutation(MORTGAGE_PROPERTY, options)\nexport { useMortgagePropertyMutation, MORTGAGE_PROPERTY }\n","import { useMutation, gql } from '@apollo/client'\n\nconst REJOIN_GAME = gql`\n  mutation($username: String!, $gameId: ID!){\n    rejoinGame(username: $username, gameId: $gameId){\n      balance\n      id\n      isPlaying\n      lastRoll1\n      lastRoll2\n      color\n      username\n      x\n      y\n    }\n  }\n`\n\nconst useRejoinGameMutation = (options) => useMutation(REJOIN_GAME, options)\nexport { useRejoinGameMutation, REJOIN_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst ROLL_DICE = gql`\n  mutation($playerId: ID!){\n    rollDice(playerId: $playerId){\n      id\n    }\n  }\n`\n\nconst useRollDiceMutation = (options) => useMutation(ROLL_DICE, options)\nexport { useRollDiceMutation, ROLL_DICE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst SELL_HOUSE = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        sellHouse(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useSellHouseMutation = (options) => useMutation(SELL_HOUSE, options)\nexport { useSellHouseMutation, SELL_HOUSE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst START_GAME = gql`\n  mutation($gameId: ID!){\n    startGame(gameId: $gameId){\n      id\n    }\n  }\n`\n\nconst useStartGameMutation = (options) => useMutation(START_GAME, options)\nexport { useStartGameMutation, START_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst UNMORTGAGE_PROPERTY = gql`\n  mutation($propertyId: ID!){\n    unmortgageProperty(propertyId: $propertyId){\n      id\n    }\n  }\n`\n\nconst useUnmortgagePropertyMutation = (options) => useMutation(UNMORTGAGE_PROPERTY, options)\nexport { useUnmortgagePropertyMutation, UNMORTGAGE_PROPERTY }\n","import { gql } from '@apollo/client'\n\nconst GAME = gql`   \n    query($id: ID!){\n        game(id: $id){\n            auctions {\n                bids {\n                    amount\n                }\n                id\n            }\n            height\n            hotelAvailable\n            houseAvailable\n            id\n            players {\n                id\n                username\n                color\n                balance\n            }\n            owner {\n                id\n                username\n            }\n            currentPlayer{\n                id\n                username\n                canRoll\n                lastRoll1\n                lastRoll2\n                balance\n                tile {\n                    id\n                    boardTile{\n                        ... on ActionTile {\n                            id\n                            name\n                        }\n                        ... on Property {\n                            id\n                            name\n                            price\n                            mortgage\n                            stage\n                            state\n                            housePrice\n                            propertySet{\n                                color\n                            }\n                            player{\n                                id\n                            }\n                        }\n                        ... on Deck {\n                            id\n                            name\n                        }\n                        ... on Utility {\n                            id\n                            name\n                            price\n                        }\n                    }\n                    boardTileType\n                }\n            }\n            state\n            tiles {\n            id\n            boardTile{\n                ... on ActionTile {\n                    id\n                    name\n                }\n                ... on Property {\n                    id\n                    name\n                    price\n                    mortgage\n                    stage\n                    state\n                    housePrice\n                    propertySet{\n                        color\n                    }\n                    player{\n                        color\n                    }\n                }\n                ... on Deck {\n                    id\n                    name\n                }\n                ... on Utility {\n                    id\n                    name\n                    price\n                }\n            }\n            boardTileType\n            currentPlayers{\n                id\n                color\n            }\n            x\n            y\n            }\n            width\n        }\n    }  \n`\n\nexport { GAME }\n","import { gql } from '@apollo/client'\n\nconst GAMES = gql`   \n    query{\n        games{\n            id\n            height\n            hotelAvailable\n            houseAvailable\n        }\n    }  \n`\n\nexport { GAMES }\n","import { gql } from '@apollo/client'\n\nconst TILE = gql`   \n    query($id: ID!) {\n        tile(id: $id) {\n            boardTile{\n                ... on ActionTile {\n                    id\n                    name\n                }\n                ... on Property {\n                    id\n                    name\n                    price\n                    mortgage\n                    stage\n                    state\n                    housePrice\n                    canBuyHouse\n                    canSellHouse\n                    propertyRents{\n                        stage\n                        rent\n                    }\n                    propertySet{\n                        color\n                    }\n                    player{\n                        id\n                    }\n                }\n                ... on Deck {\n                    id\n                    name\n                }\n                ... on Utility {\n                    id\n                    name\n                    price\n                }\n            }\n            boardTileType\n        }\n    }\n`\n\nexport { TILE }\n","import { gql } from '@apollo/client'\n\nconst TEST = gql`\n    subscription{\n        gameEvents{\n            data{\n                auctions {\n                    bids {\n                        amount\n                    }\n                    id\n                }\n                height\n                hotelAvailable\n                houseAvailable\n                id\n                players {\n                    id\n                    username\n                    color\n                    balance\n                }\n                owner {\n                    id\n                    username\n                }\n                currentPlayer{\n                    id\n                    username\n                    canRoll\n                    lastRoll1\n                    lastRoll2\n                    balance\n                    tile {\n                        id\n                        boardTile{\n                            ... on ActionTile {\n                                id\n                                name\n                            }\n                            ... on Property {\n                                id\n                                name\n                                price\n                                mortgage\n                                stage\n                                state\n                                housePrice\n                                propertySet{\n                                    color\n                                }\n                                player{\n                                    id\n                                }\n                            }\n                            ... on Deck {\n                                id\n                                name\n                            }\n                            ... on Utility {\n                                id\n                                name\n                                price\n                            }\n                        }\n                        boardTileType\n                    }\n                }\n                state\n                tiles {\n                id\n                boardTile{\n                    ... on ActionTile {\n                        id\n                        name\n                    }\n                    ... on Property {\n                        id\n                        name\n                        price\n                        mortgage\n                        stage\n                        state\n                        housePrice\n                        propertySet{\n                            color\n                        }\n                        player{\n                            color\n                        }\n                    }\n                    ... on Deck {\n                        id\n                        name\n                    }\n                    ... on Utility {\n                        id\n                        name\n                        price\n                    }\n                }\n                boardTileType\n                currentPlayers{\n                    id\n                    color\n                }\n                x\n                y\n                }\n                width\n            }\n            message\n        }\n    }\n`\nexport { TEST }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useCreateGameMutation } from '../../data'\nimport { Redirect } from 'react-router-dom'\n\nconst JoinPage = props => {\n  const [formStatus, setFormStatus] = useState('initial')\n  const [username, setUsername] = useState()\n  const [redirect, setRedirect] = useState(null)\n\n  const redirectLocation = data => {\n    props.setUser(data.createGame.owner)\n    setRedirect(data.createGame.id)\n  }\n\n  const [createGame] = useCreateGameMutation({\n    onCompleted: redirectLocation\n  })\n\n  const handleCreate = () => {\n    if ((username !== '' && username.length > 0)) {\n      createGame({\n        variables: {\n          username: username\n        }\n      })\n    } else {\n      if (username === '') {\n        alert('Please enter a title.')\n      }\n    }\n  }\n\n  const handleInputChange = function (e) {\n    switch (e.target.name) {\n      case 'username':\n        setUsername(e.target.value)\n        break\n    }\n  }\n\n  return (\n      <div className=\"join-page\">\n        { redirect && <Redirect to={'/game/' + redirect}/> }\n        <div className=\"menu\">\n          { formStatus === 'initial' &&\n            <>\n              <div className=\"menu-title\"><img src=\"https://i.imgur.com/1XwqRQP.png\" width=\"300px\"></img></div>\n              {/* <div className=\"menu-subtitle\">~100 players online</div>\n              <input className=\"menu-button\" type=\"button\" value=\"Find Game\"/> */}\n              <input className=\"menu-button\" type=\"button\" value=\"Create Lobby\" onClick={() => setFormStatus('creating')}/>\n              <a className=\"menu-button\" href=\"https://github.com/monoplio\">Github</a>\n              <p style={ { fontSize: '10px', marginTop: '3em' } }>© Justin Chang & Matthew MacRae-Bovell</p>\n            </>\n          }\n\n          { formStatus === 'creating' &&\n            <>\n              <input className=\"menu-input\" type=\"text\" placeholder=\"Nickname (optional)\" name=\"username\" value={username} onChange={handleInputChange}/>\n              <input className=\"menu-button\" type=\"button\" value=\"Go\" onClick={handleCreate}/>\n              <input className=\"menu-button\" type=\"button\" value=\"Back\" onClick={() => setFormStatus('initial')}/>\n            </>\n          }\n        </div>\n      </div>\n  )\n}\n\nexport { JoinPage }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { CornerTile, TileRow, Dice } from '../../components'\n\nconst Board = props => {\n  return (\n    <div className=\"board\">\n        <div className=\"horizontal-row\">\n            <CornerTile tile={props.game.tiles[20]}/>\n            <TileRow style={{ transform: 'rotate(180deg)' }} tiles={props.game.tiles.slice(21, 30).reverse()} setSelectedTile={props.setSelectedTile}/>\n            <CornerTile tile={props.game.tiles[30]}/>\n        </div>\n        <div className=\"middle-row\">\n            <div className=\"column\">\n                <TileRow style={{ transform: 'rotate(90deg)' }} tiles={props.game.tiles.slice(11, 20).reverse()} setSelectedTile={props.setSelectedTile}/>\n            </div>\n            <div className=\"center-board\">\n                <img src=\"https://i.imgur.com/1XwqRQP.png\" width=\"300px\"></img>\n                { props.message && props.message === 'RollDice' &&\n                  <Dice dice={props.game.currentPlayer}/>\n                }\n            </div>\n            <div className=\"column\">\n                <TileRow style={{ transform: 'rotate(270deg)' }} tiles={props.game.tiles.slice(31, 40).reverse()} setSelectedTile={props.setSelectedTile}/>\n            </div>\n        </div>\n        <div className=\"horizontal-row\">\n            <CornerTile tile={props.game.tiles[10]}/>\n            <TileRow tiles={props.game.tiles.slice(1, 10).reverse()} setSelectedTile={props.setSelectedTile}/>\n            <CornerTile tile={props.game.tiles[0]}/>\n        </div>\n  </div>\n  )\n}\n\nexport { Board }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst CornerTile = props => {\n  return (\n    <div className=\"corner\">\n        <div className=\"corner-tile-players\">\n            { props.tile.currentPlayers.map(player => (\n                <div className=\"horizontal-tile-player\" key={'player-' + player.id} style={{ backgroundColor: player.color }} onClick={() => console.log(player)}></div>\n            ))\n            }\n        </div>\n        <div>{props.tile.boardTile.name}</div>\n    </div>\n  )\n}\n\nexport { CornerTile }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst Dice = props => {\n  return (\n    <div className=\"dice-wrap\">\n        <span className={'dice dice-' + props.dice.lastRoll1} title={'Dice ' + props.dice.lastRoll1}></span>\n        <span className={'dice dice-' + props.dice.lastRoll2} title={'Dice ' + props.dice.lastRoll2}></span>\n    </div>\n  )\n}\n\nexport { Dice }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { TILE } from '../../data'\nimport { PropertyDetailed } from '../../components'\n\nfunction AuctionModal (props) {\n  const [amount, setAmount] = useState('')\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    variables: {\n      id: props.tileId\n    }\n  })\n\n  const handleInputChange = (e) => {\n    setAmount(e.target.value)\n    props.setBid(e.target.value)\n  }\n\n  const canEnd = () => {\n    let max = props.bids[0]\n    for (let i = 1; i < props.bids.length; i++) {\n      max = props.bids[i].amount > max.amount ? props.bids[i] : max\n    }\n    return (props.user.id !== max.id || max.amount === 0)\n  }\n\n  return (\n    <>\n        <div className=\"modal\">\n            <label className=\"modal-bg\" htmlFor=\"modal-1\"></label>\n            <div className=\"modal-inner\">\n                <div className=\"modal-body\">\n                    {(!tileQueryLoading && tileQueryData) &&\n                      <>\n                        <PropertyDetailed tile={tileQueryData.tile} />\n                        <div style={{ marginBottom: '2em' }}></div>\n                      </>\n                    }\n                    <h2>Highest Bid: ${props.highest}</h2>\n                    {\n                        (!props.bal || props.bal > props.highest)\n                          ? <>\n                            <input className=\"menu-input-num\" placeholder={`${props.highest + 1}`} min={`${props.highest + 1}`} type=\"number\" onChange={handleInputChange} />\n                            <input className=\"menu-button\" type=\"button\" value=\"Increase Bid\" onClick={() => { props.setBid(amount); props.increase() }}/>\n                        </>\n                          : null\n                    }\n                    {\n                        canEnd()\n                          ? <input className=\"menu-button\" type=\"button\" value=\"End Bid\" onClick={() => { props.end() }}/>\n                          : null\n                    }\n\n                </div>\n            </div>\n        </div>\n    </>\n  )\n}\n\nexport { AuctionModal }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { TILE } from '../../data'\nimport { PropertyDetailed } from '../../components'\n\nfunction BuyAuctionModal (props) {\n  const [show, setShow] = useState(true)\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    variables: {\n      id: props.tileId\n    }\n  })\n\n  const hide = () => {\n    setShow(false)\n  }\n  return (\n        <>\n            {show\n              ? (\n                <div className=\"modal\">\n                    <label className=\"modal-bg\" htmlFor=\"modal-1\"></label>\n                    <div className=\"modal-inner\">\n                        <div className=\"modal-body\">\n                        {(!tileQueryLoading && tileQueryData) &&\n                          <>\n                            <PropertyDetailed tile={tileQueryData.tile} />\n                            <div style={{ marginBottom: '2em' }}></div>\n                          </>\n                        }\n                        <input className=\"menu-button\" type=\"button\" value=\"Buy\" onClick={() => { props.buy(); hide() }}/>\n                        <input className=\"menu-button\" type=\"button\" value=\"Auction\" onClick={() => { props.auction(); hide() }}/>\n                        </div>\n                    </div>\n                </div>\n                )\n              : null}\n        </>\n  )\n}\n\nexport { BuyAuctionModal }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst PropertyDetailed = props => {\n  return (\n        <>\n            {(props.tile.boardTileType === 'Property' && props.tile.boardTile.propertySet.color !== 'black') &&\n                <div className=\"property-detailed\">\n                    <div className=\"property-detailed-header\" style={{ backgroundColor: props.tile.boardTile.propertySet.color }}>\n                        {props.tile.boardTile.name}\n                    </div>\n                    <div className=\"property-detailed-rent\">RENT ${props.tile.boardTile.propertyRents[0].rent}</div>\n                    <hr></hr>\n                    <>\n                        { props.tile.boardTile.propertyRents.map(propertyRent => (\n                            <>\n                                { propertyRent.stage !== 0 &&\n                                    <div className=\"property-detailed-row\" key={propertyRent.stage}>\n                                        <div>With {propertyRent.stage < 5 ? propertyRent.stage : ''} { propertyRent.stage !== 1 ? (propertyRent.stage !== 5 ? 'Houses' : 'HOTEL') : 'House' }</div>\n                                        <div>${propertyRent.rent}</div>\n                                    </div>\n                                }\n                            </>\n                        ))\n                        }\n                    </>\n                    <hr></hr>\n                    <div className=\"property-detailed-row\">\n                        <div>House Cost</div>\n                        <div>${props.tile.boardTile.housePrice}</div>\n                    </div>\n                    <div className=\"property-detailed-row\">\n                        <div>Mortgage Value</div>\n                        <div>${props.tile.boardTile.mortgage}</div>\n                    </div>\n                </div>\n            }\n        </>\n  )\n}\n\nexport { PropertyDetailed }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst PropertyHeader = props => {\n  return (\n    <div className=\"property-header\" style={{ backgroundColor: props.color }}>\n        { props.stage < 5 &&\n            <>\n                { props.stage >= 1 && <div className=\"property-house\"></div> }\n                { props.stage >= 2 && <div className=\"property-house\"></div> }\n                { props.stage >= 3 && <div className=\"property-house\"></div> }\n                { props.stage >= 4 && <div className=\"property-house\"></div> }\n            </>\n        }\n        { props.stage >= 5 &&\n            <div className=\"property-hotel\"></div>\n        }\n    </div>\n  )\n}\n\nexport { PropertyHeader }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { PropertyHeader } from '../../components'\n\nconst Tile = props => {\n  return (\n    <div className=\"horizontal-tile\" key={props.key} onClick={() => props.setSelectedTile(props.tile.id)} style={{ backgroundColor: (props.tile.boardTileType === 'Property' ? (props.tile.boardTile.state === 'mortgaged' ? 'lightgray' : 'white') : ' white') }}>\n        <div className=\"horizontal-tile-players\">\n            { props.tile.currentPlayers.map(player => (\n                <div className=\"horizontal-tile-player\" key={'player-' + player.id} style={{ backgroundColor: player.color }}></div>\n            ))\n            }\n        </div>\n        { props.tile.boardTileType === 'ActionTile' &&\n            <div>{props.tile.boardTile.name}</div>\n        }\n\n        { props.tile.boardTileType === 'Property' &&\n            <>\n                <PropertyHeader color={props.tile.boardTile.propertySet.color} stage={props.tile.boardTile.stage}/>\n                <div>{props.tile.boardTile.name}</div>\n                <div>${props.tile.boardTile.price}</div>\n                { props.tile.boardTile.player !== null &&\n                    <div style={{ backgroundColor: props.tile.boardTile.player.color, height: '5px' }}></div>\n                }\n            </>\n        }\n\n        { props.tile.boardTileType === 'Deck' &&\n            <div>{props.tile.boardTile.name}</div>\n        }\n\n        { props.tile.boardTileType === 'Utility' &&\n            <>\n                <div>{props.tile.boardTile.name}</div>\n                <div>${props.tile.boardTile.price}</div>\n            </>\n        }\n    </div>\n  )\n}\n\nexport { Tile }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { Tile } from '../../components'\n\nconst TileRow = props => {\n  return (\n    <div className=\"row\" style={props.style}>\n        { props.tiles.map(tile => (\n            <Tile key={tile.id} tile={tile} setSelectedTile={props.setSelectedTile}/>\n        ))\n        }\n    </div>\n  )\n}\n\nexport { TileRow }\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-empty-pattern */\nimport React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport { useEndBidMutation, useIncreaseBidMutation, useCreateAuctionMutation, useBuyHouseMutation, useBuyPropertyMutation, useEndTurnMutation, useJoinGameMutation, useSellHouseMutation, useStartGameMutation, useRejoinGameMutation, useRollDiceMutation, useMortgagePropertyMutation, useUnmortgagePropertyMutation, GAME, TEST, TILE } from '../../data'\nimport { Board, PropertyDetailed, BuyAuctionModal, AuctionModal } from '../../components'\n\nconst GamePage = props => {\n  const { id } = useParams()\n  const [game, setGame] = useState(null)\n  const [username, setUsername] = useState()\n  const [selectedTile, setSelectedTile] = useState(null)\n  const [bidAmount, setBidAmount] = useState(0)\n\n  const handleReceivedData = ({ subscriptionData: { data } }) => {\n    setGame(data.gameEvents.data)\n  }\n\n  const { loading, data } = useQuery(GAME, {\n    variables: {\n      id: id\n    }\n  })\n\n  const { data: subscriptionData } = useSubscription(TEST, // data: testData, loading: testLoading\n    {\n      variables: {\n        gameId: id\n      },\n      onSubscriptionData: handleReceivedData\n    }\n  )\n\n  const setUser = data => {\n    props.setUser(data.joinGame)\n  }\n\n  const setUserAfterRejoin = data => {\n    props.setUser(data.rejoinGame)\n  }\n\n  const clearProperty = data => {\n    setSelectedTile(null)\n  }\n\n  const resetSelectedTile = data => {\n    setSelectedTile(selectedTile)\n  }\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    skip: selectedTile === null,\n    variables: {\n      id: selectedTile\n    }\n  })\n\n  const [increaseBid] = useIncreaseBidMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      auctionId: game && game.auctions && game.auctions[0] ? game.auctions[0].id : -1,\n      bidAmount: parseInt(bidAmount)\n    }\n  })\n\n  const [endBid] = useEndBidMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      auctionId: game && game.auctions && game.auctions[0] ? game.auctions[0].id : -1\n    }\n  })\n\n  const [auctionProperty] = useCreateAuctionMutation({\n    variables: {\n      propertyId: (game && game.currentPlayer) ? game.currentPlayer.tile.boardTile.id : -1\n    }\n  })\n\n  const [buyProperty] = useBuyPropertyMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (game && game.currentPlayer) ? game.currentPlayer.tile.boardTile.id : -1\n    }\n  })\n\n  const [buyHouse] = useBuyHouseMutation({\n    onCompleted: resetSelectedTile,\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (!tileQueryLoading && tileQueryData && tileQueryData.tile) ? tileQueryData.tile.boardTile.id : -1\n    }\n  })\n\n  const [sellHouse] = useSellHouseMutation({\n    onCompleted: resetSelectedTile,\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (!tileQueryLoading && tileQueryData && tileQueryData.tile) ? tileQueryData.tile.boardTile.id : -1\n    }\n  })\n\n  const [joinGame] = useJoinGameMutation({\n    onCompleted: setUser\n  })\n\n  const [rejoinGame] = useRejoinGameMutation({\n    onCompleted: setUserAfterRejoin\n  })\n\n  const [startGame] = useStartGameMutation({\n    variables: {\n      gameId: id\n    }\n  })\n\n  const [rollDice] = useRollDiceMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1\n    }\n  })\n\n  const [endTurn] = useEndTurnMutation({\n    onCompleted: clearProperty,\n    variables: {\n      playerId: props.user ? props.user.id : -1\n    }\n  })\n\n  const [mortgageProperty] = useMortgagePropertyMutation({\n    variables: {\n      propertyId: tileQueryData ? parseInt(tileQueryData.tile.boardTile.id) : -1\n    }\n  })\n\n  const [unmortgageProperty] = useUnmortgagePropertyMutation({\n    variables: {\n      propertyId: tileQueryData ? parseInt(tileQueryData.tile.boardTile.id) : -1\n    }\n  })\n\n  const handleJoin = () => {\n    if (username && (username !== '' && username.length > 0)) {\n      joinGame({\n        variables: {\n          username: username,\n          gameId: id\n        }\n      })\n    } else {\n      alert('Please enter a username.')\n    }\n  }\n\n  const handleInputChange = function (e) {\n    switch (e.target.name) {\n      case 'username':\n        setUsername(e.target.value)\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!loading) {\n      if (game === null) {\n        setGame(data.game)\n      }\n    }\n  }, [data])\n\n  return (\n      <div className=\"game-page\">\n        { (!loading && game && game.state === 'pending') &&\n          <div className=\"menu\">\n              <img src=\"https://i.imgur.com/1XwqRQP.png\" width=\"300px\"></img>\n              <div className=\"menu-title\">Game {id}</div>\n              <div className=\"menu-subtitle\">~ Awaiting players...</div>\n              <div className=\"menu-players\">\n                { game.players.map(player => (\n                  <>\n                    { props.user && (player.id === props.user.id)\n                      ? <div key={player.id}> * {player.username}</div>\n                      : <div key={player.id}> {player.username}</div>\n                    }\n                  </>\n                ))\n                }\n              </div>\n              { !props.user &&\n                <>\n                  <input className=\"menu-input\" type=\"text\" placeholder=\"Nickname (optional)\" name=\"username\" value={username} onChange={handleInputChange}/>\n                  <input className=\"menu-button\" type=\"button\" value=\"Join\" onClick={handleJoin}/>\n                </>\n              }\n              { props.user && (game.owner.id === props.user.id) && (game.players.length >= 2) &&\n                  <input className=\"menu-button\" type=\"button\" value=\"Start Game\" onClick={startGame}/>\n              }\n            </div>\n        }\n        { (!loading && game && game.state !== 'pending') &&\n          <div className=\"game-display\">\n            <div className=\"options\">\n              { game.players.map(player => (\n                <>\n                  <div className=\"player-card\" style={{ backgroundColor: player.color }} onClick={() => rejoinGame({ variables: { username: player.username, gameId: game.id } })}>\n                    <div>{player.id === game.currentPlayer.id ? '->' : ''} {player.username} { props.user && (player.id === props.user.id) ? '(you)' : ''}</div>\n                    <div>${player.balance} </div>\n                  </div>\n                </>\n              ))\n              }\n            </div>\n            <Board game={game} message={ subscriptionData ? subscriptionData.gameEvents.message : null} setSelectedTile={setSelectedTile}/>\n            {\n              (game.state === 'auction')\n                ? <AuctionModal game={game} user={props.user} bids={game.auctions[0].bids} bal={props.user.balance} highest={Math.max.apply(Math, game.auctions[0].bids.map((o) => { return o.amount }))} setBid={setBidAmount} increase={increaseBid} end={endBid} tileId={game.currentPlayer.tile.id}/>\n                : null\n            }\n            <div className=\"options\">\n              {(selectedTile !== null && !tileQueryLoading) &&\n              <>\n                <PropertyDetailed tile={tileQueryData.tile} />\n              </>\n              }\n              { props.user && game && game.currentPlayer.id === props.user.id &&\n                <>\n                { (selectedTile !== null && !tileQueryLoading && tileQueryData && tileQueryData.tile.boardTileType === 'Property' && tileQueryData.tile.boardTile.player !== null && game.currentPlayer.id === tileQueryData.tile.boardTile.player.id) &&\n                  <>\n                    {\n                      (tileQueryData.tile.boardTile.canBuyHouse === true && tileQueryData.tile.boardTile.stage < 5 && game.currentPlayer.balance >= tileQueryData.tile.boardTile.housePrice) &&\n                        <input className=\"menu-button\" type=\"button\" value=\"Buy House\" onClick={buyHouse}/>\n                    }\n                    {\n                      (tileQueryData.tile.boardTile.canSellHouse === true && tileQueryData.tile.boardTile.stage > 0) &&\n                        <input className=\"menu-button\" type=\"button\" value=\"Sell House\" onClick={sellHouse}/>\n                    }\n                    {\n                      tileQueryData.tile.boardTile.state !== 'mortgaged'\n                        ? <input className=\"menu-button\" type=\"button\" value=\"Mortgage\" onClick={mortgageProperty}/>\n                        : <input className=\"menu-button\" type=\"button\" value=\"Un Mortgage\" onClick={unmortgageProperty}/>\n                    }\n                  </>\n                }\n                { game.currentPlayer.tile.boardTileType === 'Property' && game.currentPlayer.tile.boardTile.player === null &&\n                  <BuyAuctionModal buy={buyProperty} auction={auctionProperty} tileId={game.currentPlayer.tile.id}/>\n                }\n                { game.currentPlayer.canRoll\n                  ? <input className=\"menu-button\" type=\"button\" value=\"Roll\" onClick={rollDice}/>\n                  : <input className=\"menu-button\" type=\"button\" value=\"End\" onClick={endTurn}/>\n                }\n                </>\n              }\n            </div>\n          </div>\n        }\n      </div>\n  )\n}\n\nexport { GamePage }\n","import React, { useState } from 'react'\nimport { JoinPage, GamePage } from './pages'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from '@apollo/client'\nimport { ActionCableLink } from 'graphql-ruby-client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport ActionCable from 'actioncable'\n\nimport './App.css'\n\nconst httpLink = new HttpLink({\n  uri: 'https://floating-reef-26790.herokuapp.com/graphql' // https://floating-reef-26790.herokuapp.com/graphql\n})\n\nconst cable = ActionCable.createConsumer('ws://floating-reef-26790.herokuapp.com:/cable')\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  new ActionCableLink({ cable }),\n  httpLink\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n})\n\nfunction App () {\n  const [user, setUser] = useState(null)\n\n  return (\n    <ApolloProvider client={client}>\n      <Router basename=\"/client\">\n        <Switch>\n          <Route path=\"/game/:id\" >\n            <GamePage user={user} setUser={setUser}/>\n          </Route>\n          <Route exact path=\"/\">\n            <JoinPage setUser={setUser}/>\n          </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\nreportWebVitals()\n"],"sourceRoot":""}