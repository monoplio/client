{"version":3,"sources":["../node_modules/graphql-ruby-client/dist/sync sync","data/mutations/BuyHouse.mutation.jsx","data/mutations/BuyProperty.mutation.jsx","data/mutations/CreateGame.mutation.jsx","data/mutations/EndTurn.mutation.jsx","data/mutations/JoinGame.mutation.jsx","data/mutations/MortgageProperty.mutation.jsx","data/mutations/RejoinGame.mutation.jsx","data/mutations/RollDice.mutation.jsx","data/mutations/SellHouse.mutation.jsx","data/mutations/StartGame.mutation.jsx","data/mutations/UnmortgageProperty.mutation.jsx","data/queries/Game.query.jsx","data/queries/Games.query.jsx","data/queries/Tile.query.jsx","data/subscriptions/Test.subscription.jsx","pages/JoinPage/JoinPage.jsx","components/Board/Board.jsx","components/CornerTile/CornerTile.jsx","components/Dice/Dice.jsx","components/PropertyDetailed/PropertyDetailed.jsx","components/PropertyHeader/PropertyHeader.jsx","components/Tile/Tile.jsx","components/TileRow/TileRow.jsx","pages/GamePage/GamePage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","BUY_HOUSE","gql","BUY_PROPERTY","CREATE_GAME","END_TURN","JOIN_GAME","MORTGAGE_PROPERTY","REJOIN_GAME","ROLL_DICE","SELL_HOUSE","START_GAME","UNMORTGAGE_PROPERTY","GAME","TILE","TEST","JoinPage","props","options","useState","formStatus","setFormStatus","username","setUsername","redirect","setRedirect","onCompleted","data","setUser","createGame","owner","useMutation","className","to","type","value","onClick","placeholder","name","onChange","target","length","variables","alert","Board","tile","game","tiles","style","transform","slice","reverse","setSelectedTile","message","dice","currentPlayer","CornerTile","currentPlayers","map","player","backgroundColor","color","console","log","boardTile","Dice","lastRoll1","title","lastRoll2","PropertyDetailed","boardTileType","propertySet","propertyRents","rent","propertyRent","stage","housePrice","mortgage","PropertyHeader","Tile","state","price","height","key","TileRow","GamePage","useParams","setGame","selectedTile","useQuery","loading","subscriptionData","useSubscription","gameId","onSubscriptionData","gameEvents","resetSelectedTile","skip","tileQueryLoading","tileQueryData","playerId","user","propertyId","buyProperty","useBuyHouseMutation","buyHouse","useSellHouseMutation","sellHouse","useJoinGameMutation","joinGame","useRejoinGameMutation","rejoinGame","useStartGameMutation","startGame","useRollDiceMutation","rollDice","useEndTurnMutation","endTurn","useMortgagePropertyMutation","parseInt","mortgageProperty","useUnmortgagePropertyMutation","unmortgageProperty","useEffect","players","balance","canBuyHouse","canSellHouse","canRoll","httpLink","HttpLink","uri","cable","ActionCable","createConsumer","splitLink","split","query","definition","getMainDefinition","kind","operation","ActionCableLink","client","ApolloClient","link","cache","InMemoryCache","App","basename","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed996a27.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 338;","import { useMutation, gql } from '@apollo/client'\n\nconst BUY_HOUSE = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        buyHouse(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useBuyHouseMutation = (options) => useMutation(BUY_HOUSE, options)\nexport { useBuyHouseMutation, BUY_HOUSE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst BUY_PROPERTY = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        buyProperty(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useBuyPropertyMutation = (options) => useMutation(BUY_PROPERTY, options)\nexport { useBuyPropertyMutation, BUY_PROPERTY }\n","import { useMutation, gql } from '@apollo/client'\n\nconst CREATE_GAME = gql`\n  mutation createGame ($username: String!) {\n    createGame(username: $username) {\n        id\n        owner {\n            id\n            username\n            color\n            game {\n                id\n            }\n        }\n    }\n  }\n`\n\nconst useCreateGameMutation = (options) => useMutation(CREATE_GAME, options)\nexport { useCreateGameMutation, CREATE_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst END_TURN = gql`\n  mutation($playerId: ID!){\n    endTurn(playerId: $playerId){\n      id\n    }\n  }\n`\n\nconst useEndTurnMutation = (options) => useMutation(END_TURN, options)\nexport { useEndTurnMutation, END_TURN }\n","import { useMutation, gql } from '@apollo/client'\n\nconst JOIN_GAME = gql`\n  mutation($username: String!, $gameId: ID!){\n    joinGame(username: $username, gameId: $gameId){\n      balance\n      id\n      isPlaying\n      lastRoll1\n      lastRoll2\n      color\n      username\n      x\n      y\n    }\n  }\n`\n\nconst useJoinGameMutation = (options) => useMutation(JOIN_GAME, options)\nexport { useJoinGameMutation, JOIN_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst MORTGAGE_PROPERTY = gql`\n  mutation($propertyId: ID!){\n    mortgageProperty(propertyId: $propertyId){\n      id\n    }\n  }\n`\n\nconst useMortgagePropertyMutation = (options) => useMutation(MORTGAGE_PROPERTY, options)\nexport { useMortgagePropertyMutation, MORTGAGE_PROPERTY }\n","import { useMutation, gql } from '@apollo/client'\n\nconst REJOIN_GAME = gql`\n  mutation($username: String!, $gameId: ID!){\n    rejoinGame(username: $username, gameId: $gameId){\n      balance\n      id\n      isPlaying\n      lastRoll1\n      lastRoll2\n      color\n      username\n      x\n      y\n    }\n  }\n`\n\nconst useRejoinGameMutation = (options) => useMutation(REJOIN_GAME, options)\nexport { useRejoinGameMutation, REJOIN_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst ROLL_DICE = gql`\n  mutation($playerId: ID!){\n    rollDice(playerId: $playerId){\n      id\n    }\n  }\n`\n\nconst useRollDiceMutation = (options) => useMutation(ROLL_DICE, options)\nexport { useRollDiceMutation, ROLL_DICE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst SELL_HOUSE = gql`\n    mutation($playerId: ID!, $propertyId: ID!){\n        sellHouse(playerId: $playerId, propertyId: $propertyId){\n            id\n        }\n    }\n`\n\nconst useSellHouseMutation = (options) => useMutation(SELL_HOUSE, options)\nexport { useSellHouseMutation, SELL_HOUSE }\n","import { useMutation, gql } from '@apollo/client'\n\nconst START_GAME = gql`\n  mutation($gameId: ID!){\n    startGame(gameId: $gameId){\n      id\n    }\n  }\n`\n\nconst useStartGameMutation = (options) => useMutation(START_GAME, options)\nexport { useStartGameMutation, START_GAME }\n","import { useMutation, gql } from '@apollo/client'\n\nconst UNMORTGAGE_PROPERTY = gql`\n  mutation($propertyId: ID!){\n    unmortgageProperty(propertyId: $propertyId){\n      id\n    }\n  }\n`\n\nconst useUnmortgagePropertyMutation = (options) => useMutation(UNMORTGAGE_PROPERTY, options)\nexport { useUnmortgagePropertyMutation, UNMORTGAGE_PROPERTY }\n","import { gql } from '@apollo/client'\n\nconst GAME = gql`   \n    query($id: ID!){\n        game(id: $id){\n            height\n            hotelAvailable\n            houseAvailable\n            id\n            players {\n                id\n                username\n                color\n                balance\n            }\n            owner {\n                id\n                username\n            }\n            currentPlayer{\n                id\n                username\n                canRoll\n                lastRoll1\n                lastRoll2\n                balance\n                tile {\n                    id\n                    boardTile{\n                        ... on ActionTile {\n                            id\n                            name\n                        }\n                        ... on Property {\n                            id\n                            name\n                            price\n                            mortgage\n                            stage\n                            state\n                            housePrice\n                            propertySet{\n                                color\n                            }\n                            player{\n                                id\n                            }\n                        }\n                        ... on Deck {\n                            id\n                            name\n                        }\n                        ... on Utility {\n                            id\n                            name\n                            price\n                        }\n                    }\n                    boardTileType\n                }\n            }\n            state\n            tiles {\n            id\n            boardTile{\n                ... on ActionTile {\n                    id\n                    name\n                }\n                ... on Property {\n                    id\n                    name\n                    price\n                    mortgage\n                    stage\n                    state\n                    housePrice\n                    propertySet{\n                        color\n                    }\n                    player{\n                        color\n                    }\n                }\n                ... on Deck {\n                    id\n                    name\n                }\n                ... on Utility {\n                    id\n                    name\n                    price\n                }\n            }\n            boardTileType\n            currentPlayers{\n                id\n                color\n            }\n            x\n            y\n            }\n            width\n        }\n    }  \n`\n\nexport { GAME }\n","import { gql } from '@apollo/client'\n\nconst GAMES = gql`   \n    query{\n        games{\n            id\n            height\n            hotelAvailable\n            houseAvailable\n        }\n    }  \n`\n\nexport { GAMES }\n","import { gql } from '@apollo/client'\n\nconst TILE = gql`   \n    query($id: ID!) {\n        tile(id: $id) {\n            boardTile{\n                ... on ActionTile {\n                    id\n                    name\n                }\n                ... on Property {\n                    id\n                    name\n                    price\n                    mortgage\n                    stage\n                    state\n                    housePrice\n                    canBuyHouse\n                    canSellHouse\n                    propertyRents{\n                        stage\n                        rent\n                    }\n                    propertySet{\n                        color\n                    }\n                    player{\n                        id\n                    }\n                }\n                ... on Deck {\n                    id\n                    name\n                }\n                ... on Utility {\n                    id\n                    name\n                    price\n                }\n            }\n            boardTileType\n        }\n    }\n`\n\nexport { TILE }\n","import { gql } from '@apollo/client'\n\nconst TEST = gql`\n    subscription{\n        gameEvents{\n            data{\n                height\n                hotelAvailable\n                houseAvailable\n                id\n                players {\n                    id\n                    username\n                    color\n                    balance\n                }\n                owner {\n                    id\n                    username\n                }\n                currentPlayer{\n                    id\n                    username\n                    canRoll\n                    lastRoll1\n                    lastRoll2\n                    balance\n                    tile {\n                        id\n                        boardTile{\n                            ... on ActionTile {\n                                id\n                                name\n                            }\n                            ... on Property {\n                                id\n                                name\n                                price\n                                mortgage\n                                stage\n                                state\n                                housePrice\n                                propertySet{\n                                    color\n                                }\n                                player{\n                                    id\n                                }\n                            }\n                            ... on Deck {\n                                id\n                                name\n                            }\n                            ... on Utility {\n                                id\n                                name\n                                price\n                            }\n                        }\n                        boardTileType\n                    }\n                }\n                state\n                tiles {\n                id\n                boardTile{\n                    ... on ActionTile {\n                        id\n                        name\n                    }\n                    ... on Property {\n                        id\n                        name\n                        price\n                        mortgage\n                        stage\n                        state\n                        housePrice\n                        propertySet{\n                            color\n                        }\n                        player{\n                            color\n                        }\n                    }\n                    ... on Deck {\n                        id\n                        name\n                    }\n                    ... on Utility {\n                        id\n                        name\n                        price\n                    }\n                }\n                boardTileType\n                currentPlayers{\n                    id\n                    color\n                }\n                x\n                y\n                }\n                width\n            }\n            message\n        }\n    }\n`\nexport { TEST }\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react'\nimport { useCreateGameMutation } from '../../data'\nimport { Redirect } from 'react-router-dom'\n\nconst JoinPage = props => {\n  const [formStatus, setFormStatus] = useState('initial')\n  const [username, setUsername] = useState()\n  const [redirect, setRedirect] = useState(null)\n\n  const redirectLocation = data => {\n    props.setUser(data.createGame.owner)\n    setRedirect(data.createGame.id)\n  }\n\n  const [createGame] = useCreateGameMutation({\n    onCompleted: redirectLocation\n  })\n\n  const handleCreate = () => {\n    if ((username !== '' && username.length > 0)) {\n      createGame({\n        variables: {\n          username: username\n        }\n      })\n    } else {\n      if (username === '') {\n        alert('Please enter a title.')\n      }\n    }\n  }\n\n  const handleInputChange = function (e) {\n    switch (e.target.name) {\n      case 'username':\n        setUsername(e.target.value)\n        break\n    }\n  }\n\n  return (\n      <div className=\"join-page\">\n        { redirect && <Redirect to={'/game/' + redirect}/> }\n        <div className=\"menu\">\n          { formStatus === 'initial' &&\n            <>\n              <div className=\"menu-title\">Monopl.io</div>\n              <div className=\"menu-subtitle\">~100 players online</div>\n              <input className=\"menu-button\" type=\"button\" value=\"Find Game\"/>\n              <input className=\"menu-button\" type=\"button\" value=\"Create Lobby\" onClick={() => setFormStatus('creating')}/>\n            </>\n          }\n\n          { formStatus === 'creating' &&\n            <>\n              <input className=\"menu-input\" type=\"text\" placeholder=\"Nickname (optional)\" name=\"username\" value={username} onChange={handleInputChange}/>\n              <input className=\"menu-button\" type=\"button\" value=\"Go\" onClick={handleCreate}/>\n              <input className=\"menu-button\" type=\"button\" value=\"Back\" onClick={() => setFormStatus('initial')}/>\n            </>\n          }\n        </div>\n      </div>\n  )\n}\n\nexport { JoinPage }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { CornerTile, TileRow, Dice } from '../../components'\n\nconst Board = props => {\n  return (\n    <div className=\"board\">\n        <div className=\"horizontal-row\">\n            <CornerTile tile={props.game.tiles[20]}/>\n            <TileRow style={{ transform: 'rotate(180deg)' }} tiles={props.game.tiles.slice(21, 30).reverse()} setSelectedTile={props.setSelectedTile}/>\n            <CornerTile tile={props.game.tiles[30]}/>\n        </div>\n        <div className=\"middle-row\">\n            <div className=\"column\">\n                <TileRow style={{ transform: 'rotate(90deg)' }} tiles={props.game.tiles.slice(11, 20).reverse()} setSelectedTile={props.setSelectedTile}/>\n            </div>\n            <div>\n                <h1>Monopl.io</h1>\n                { props.message && props.message === 'RollDice' &&\n                  <Dice dice={props.game.currentPlayer}/>\n                }\n            </div>\n            <div className=\"column\">\n                <TileRow style={{ transform: 'rotate(270deg)' }} tiles={props.game.tiles.slice(31, 40).reverse()} setSelectedTile={props.setSelectedTile}/>\n            </div>\n        </div>\n        <div className=\"horizontal-row\">\n            <CornerTile tile={props.game.tiles[10]}/>\n            <TileRow tiles={props.game.tiles.slice(1, 10).reverse()} setSelectedTile={props.setSelectedTile}/>\n            <CornerTile tile={props.game.tiles[0]}/>\n        </div>\n  </div>\n  )\n}\n\nexport { Board }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst CornerTile = props => {\n  return (\n    <div className=\"corner\">\n        <div className=\"corner-tile-players\">\n            { props.tile.currentPlayers.map(player => (\n                <div className=\"horizontal-tile-player\" key={'player-' + player.id} style={{ backgroundColor: player.color }} onClick={() => console.log(player)}></div>\n            ))\n            }\n        </div>\n        <div>{props.tile.boardTile.name}</div>\n    </div>\n  )\n}\n\nexport { CornerTile }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst Dice = props => {\n  return (\n    <div className=\"dice-wrap\">\n        <span className={'dice dice-' + props.dice.lastRoll1} title={'Dice ' + props.dice.lastRoll1}></span>\n        <span className={'dice dice-' + props.dice.lastRoll2} title={'Dice ' + props.dice.lastRoll2}></span>\n    </div>\n  )\n}\n\nexport { Dice }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst PropertyDetailed = props => {\n  return (\n        <>\n            {props.tile.boardTileType === 'Property' &&\n                <div className=\"property-detailed\">\n                    <div className=\"property-detailed-header\" style={{ backgroundColor: props.tile.boardTile.propertySet.color }}>\n                        {props.tile.boardTile.name}\n                    </div>\n                    <div className=\"property-detailed-rent\">RENT ${props.tile.boardTile.propertyRents[0].rent}</div>\n                    <hr></hr>\n                    <>\n                        { props.tile.boardTile.propertyRents.map(propertyRent => (\n                            <>\n                                { propertyRent.stage !== 0 &&\n                                    <div className=\"property-detailed-row\" key={propertyRent.stage}>\n                                        <div>With {propertyRent.stage < 5 ? propertyRent.stage : ''} { propertyRent.stage !== 1 ? (propertyRent.stage !== 5 ? 'Houses' : 'HOTEL') : 'House' }</div>\n                                        <div>${propertyRent.rent}</div>\n                                    </div>\n                                }\n                            </>\n                        ))\n                        }\n                    </>\n                    <hr></hr>\n                    <div className=\"property-detailed-row\">\n                        <div>House Cost</div>\n                        <div>${props.tile.boardTile.housePrice}</div>\n                    </div>\n                    <div className=\"property-detailed-row\">\n                        <div>Mortgage Value</div>\n                        <div>${props.tile.boardTile.mortgage}</div>\n                    </div>\n                </div>\n            }\n        </>\n  )\n}\n\nexport { PropertyDetailed }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nconst PropertyHeader = props => {\n  return (\n    <div className=\"property-header\" style={{ backgroundColor: props.color }}>\n        { props.stage < 5 &&\n            <>\n                { props.stage >= 1 && <div className=\"property-house\"></div> }\n                { props.stage >= 2 && <div className=\"property-house\"></div> }\n                { props.stage >= 3 && <div className=\"property-house\"></div> }\n                { props.stage >= 4 && <div className=\"property-house\"></div> }\n            </>\n        }\n        { props.stage >= 5 &&\n            <div className=\"property-hotel\"></div>\n        }\n    </div>\n  )\n}\n\nexport { PropertyHeader }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { PropertyHeader } from '../../components'\n\nconst Tile = props => {\n  return (\n    <div className=\"horizontal-tile\" key={props.key} onClick={() => props.setSelectedTile(props.tile.id)} style={{ backgroundColor: (props.tile.boardTileType === 'Property' ? (props.tile.boardTile.state === 'mortgaged' ? 'gray' : 'white') : ' white') }}>\n        <div className=\"horizontal-tile-players\">\n            { props.tile.currentPlayers.map(player => (\n                <div className=\"horizontal-tile-player\" key={'player-' + player.id} style={{ backgroundColor: player.color }}></div>\n            ))\n            }\n        </div>\n        { props.tile.boardTileType === 'ActionTile' &&\n            <div>{props.tile.boardTile.name}</div>\n        }\n\n        { props.tile.boardTileType === 'Property' &&\n            <>\n                <PropertyHeader color={props.tile.boardTile.propertySet.color} stage={props.tile.boardTile.stage}/>\n                <div>{props.tile.boardTile.name}</div>\n                <div>${props.tile.boardTile.price}</div>\n                { props.tile.boardTile.player !== null &&\n                    <div style={{ backgroundColor: props.tile.boardTile.player.color, height: '5px' }}></div>\n                }\n            </>\n        }\n\n        { props.tile.boardTileType === 'Deck' &&\n            <div>{props.tile.boardTile.name}</div>\n        }\n\n        { props.tile.boardTileType === 'Utility' &&\n            <>\n                <div>{props.tile.boardTile.name}</div>\n                <div>${props.tile.boardTile.price}</div>\n            </>\n        }\n    </div>\n  )\n}\n\nexport { Tile }\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { Tile } from '../../components'\n\nconst TileRow = props => {\n  return (\n    <div className=\"row\" style={props.style}>\n        { props.tiles.map(tile => (\n            <Tile key={tile.id} tile={tile} setSelectedTile={props.setSelectedTile}/>\n        ))\n        }\n    </div>\n  )\n}\n\nexport { TileRow }\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-empty-pattern */\nimport React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport { useBuyHouseMutation, useBuyPropertyMutation, useEndTurnMutation, useJoinGameMutation, useSellHouseMutation, useStartGameMutation, useRejoinGameMutation, useRollDiceMutation, useMortgagePropertyMutation, useUnmortgagePropertyMutation, GAME, TEST, TILE } from '../../data'\nimport { Board, PropertyDetailed } from '../../components'\n\nconst GamePage = props => {\n  const { id } = useParams()\n  const [game, setGame] = useState(null)\n  const [username, setUsername] = useState()\n  const [selectedTile, setSelectedTile] = useState(null)\n\n  const handleReceivedData = ({ subscriptionData: { data } }) => {\n    setGame(data.gameEvents.data)\n  }\n\n  const { loading, data } = useQuery(GAME, {\n    variables: {\n      id: id\n    }\n  })\n\n  const { data: subscriptionData } = useSubscription(TEST, // data: testData, loading: testLoading\n    {\n      variables: {\n        gameId: id\n      },\n      onSubscriptionData: handleReceivedData\n    }\n  )\n\n  const setUser = data => {\n    props.setUser(data.joinGame)\n  }\n\n  const setUserAfterRejoin = data => {\n    props.setUser(data.rejoinGame)\n  }\n\n  const clearProperty = data => {\n    setSelectedTile(null)\n  }\n\n  const resetSelectedTile = data => {\n    setSelectedTile(selectedTile)\n  }\n\n  const { loading: tileQueryLoading, data: tileQueryData } = useQuery(TILE, {\n    skip: selectedTile === null,\n    variables: {\n      id: selectedTile\n    }\n  })\n\n  const [buyProperty] = useBuyPropertyMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (game && game.currentPlayer) ? game.currentPlayer.tile.boardTile.id : -1\n    }\n  })\n\n  const [buyHouse] = useBuyHouseMutation({\n    onCompleted: resetSelectedTile,\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (!tileQueryLoading && tileQueryData && tileQueryData.tile) ? tileQueryData.tile.boardTile.id : -1\n    }\n  })\n\n  const [sellHouse] = useSellHouseMutation({\n    onCompleted: resetSelectedTile,\n    variables: {\n      playerId: props.user ? props.user.id : -1,\n      propertyId: (!tileQueryLoading && tileQueryData && tileQueryData.tile) ? tileQueryData.tile.boardTile.id : -1\n    }\n  })\n\n  const [joinGame] = useJoinGameMutation({\n    onCompleted: setUser\n  })\n\n  const [rejoinGame] = useRejoinGameMutation({\n    onCompleted: setUserAfterRejoin\n  })\n\n  const [startGame] = useStartGameMutation({\n    variables: {\n      gameId: id\n    }\n  })\n\n  const [rollDice] = useRollDiceMutation({\n    variables: {\n      playerId: props.user ? props.user.id : -1\n    }\n  })\n\n  const [endTurn] = useEndTurnMutation({\n    onCompleted: clearProperty,\n    variables: {\n      playerId: props.user ? props.user.id : -1\n    }\n  })\n\n  const [mortgageProperty] = useMortgagePropertyMutation({\n    variables: {\n      propertyId: tileQueryData ? parseInt(tileQueryData.tile.boardTile.id) : -1\n    }\n  })\n\n  const [unmortgageProperty] = useUnmortgagePropertyMutation({\n    variables: {\n      propertyId: tileQueryData ? parseInt(tileQueryData.tile.boardTile.id) : -1\n    }\n  })\n\n  const handleJoin = () => {\n    if (username && (username !== '' && username.length > 0)) {\n      joinGame({\n        variables: {\n          username: username,\n          gameId: id\n        }\n      })\n    } else {\n      alert('Please enter a username.')\n    }\n  }\n\n  const handleInputChange = function (e) {\n    switch (e.target.name) {\n      case 'username':\n        setUsername(e.target.value)\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!loading) {\n      if (game === null) {\n        setGame(data.game)\n      }\n    }\n  }, [data])\n\n  return (\n      <div className=\"game-page\">\n        { (!loading && game && game.state === 'pending') &&\n          <div className=\"menu\">\n              <div className=\"menu-title\">Game {id}</div>\n              <div className=\"menu-subtitle\">~ Awaiting players...</div>\n              <div className=\"menu-players\">\n                { game.players.map(player => (\n                  <>\n                    { props.user && (player.id === props.user.id)\n                      ? <div key={player.id}> * {player.username}</div>\n                      : <div key={player.id}> {player.username}</div>\n                    }\n                  </>\n                ))\n                }\n              </div>\n              { !props.user &&\n                <>\n                  <input className=\"menu-input\" type=\"text\" placeholder=\"Nickname (optional)\" name=\"username\" value={username} onChange={handleInputChange}/>\n                  <input className=\"menu-button\" type=\"button\" value=\"Join\" onClick={handleJoin}/>\n                </>\n              }\n              { props.user && (game.owner.id === props.user.id) && (game.players.length >= 2) &&\n                  <input className=\"menu-button\" type=\"button\" value=\"Start Game\" onClick={startGame}/>\n              }\n            </div>\n        }\n        { (!loading && game && game.state !== 'pending') &&\n          <div className=\"game-display\">\n            <div className=\"options\">\n              { game.players.map(player => (\n                <>\n                  <div className=\"player-card\" style={{ backgroundColor: player.color }} onClick={() => rejoinGame({ variables: { username: player.username, gameId: game.id } })}>\n                    <div>{player.id === game.currentPlayer.id ? '->' : ''} {player.username} { props.user && (player.id === props.user.id) ? '(you)' : ''}</div>\n                    <div>${player.balance} </div>\n                  </div>\n                </>\n              ))\n              }\n            </div>\n            <Board game={game} message={ subscriptionData ? subscriptionData.gameEvents.message : null} setSelectedTile={setSelectedTile}/>\n            <div className=\"options\">\n              {(selectedTile !== null && !tileQueryLoading) &&\n              <>\n                <PropertyDetailed tile={tileQueryData.tile} />\n              </>\n              }\n              { props.user && game && game.currentPlayer.id === props.user.id &&\n                <>\n                { (selectedTile !== null && !tileQueryLoading && tileQueryData && tileQueryData.tile.boardTileType === 'Property' && tileQueryData.tile.boardTile.player !== null && game.currentPlayer.id === tileQueryData.tile.boardTile.player.id) &&\n                  <>\n                    {\n                      (tileQueryData.tile.boardTile.canBuyHouse === true && tileQueryData.tile.boardTile.stage < 5 && game.currentPlayer.balance >= tileQueryData.tile.boardTile.housePrice) &&\n                        <input className=\"menu-button\" type=\"button\" value=\"Buy House\" onClick={buyHouse}/>\n                    }\n                    {\n                      (tileQueryData.tile.boardTile.canSellHouse === true && tileQueryData.tile.boardTile.stage > 0) &&\n                        <input className=\"menu-button\" type=\"button\" value=\"Sell House\" onClick={sellHouse}/>\n                    }\n                    {\n                      tileQueryData.tile.boardTile.state !== 'mortgaged'\n                        ? <input className=\"menu-button\" type=\"button\" value=\"Mortgage\" onClick={mortgageProperty}/>\n                        : <input className=\"menu-button\" type=\"button\" value=\"Un Mortgage\" onClick={unmortgageProperty}/>\n                    }\n                  </>\n                }\n                { game.currentPlayer.tile.boardTileType === 'Property' && game.currentPlayer.tile.boardTile.player === null &&\n                  <input className=\"menu-button\" type=\"button\" value=\"Buy Property\" onClick={buyProperty}/>\n                }\n                { game.currentPlayer.canRoll\n                  ? <input className=\"menu-button\" type=\"button\" value=\"Roll\" onClick={rollDice}/>\n                  : <input className=\"menu-button\" type=\"button\" value=\"End\" onClick={endTurn}/>\n                }\n                </>\n              }\n            </div>\n          </div>\n        }\n      </div>\n  )\n}\n\nexport { GamePage }\n","import React, { useState } from 'react'\nimport { JoinPage, GamePage } from './pages'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from '@apollo/client'\nimport { ActionCableLink } from 'graphql-ruby-client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport ActionCable from 'actioncable'\n\nimport './App.css'\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n})\n\nconst cable = ActionCable.createConsumer('ws://localhost:3000/cable')\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  new ActionCableLink({ cable }),\n  httpLink\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n})\n\nfunction App () {\n  const [user, setUser] = useState(null)\n\n  return (\n    <ApolloProvider client={client}>\n      <Router basename=\"/client\">\n        <Switch>\n          <Route path=\"/game/:id\" >\n            <GamePage user={user} setUser={setUser}/>\n          </Route>\n          <Route exact path=\"/\">\n            <JoinPage setUser={setUser}/>\n          </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\nreportWebVitals()\n"],"sourceRoot":""}